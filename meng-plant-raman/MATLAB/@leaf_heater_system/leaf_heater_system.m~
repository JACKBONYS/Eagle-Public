classdef leaf_heater_system < handle
    % A leaf heater control system consisting of a leaf-heater temp. sensor PCB and a Keysight B2902A sourcemeter
    
    properties ( Access = private )
        sourcemeter_obj
        temp_sensor_obj
        sourcemeter_default_addr = 23;  % Change this if necessary
        
        % Control loop settings
        controller = struct( ...
            'temp_setpoint', 20, ...
            'control_loop_period', 0.1, ...
            'timer', timer( ), ...
            'busy_flag', false, ...
            'hyst_up', 0.01, ...
            'hyst_down', -0.01, ...
            'default_current_level', 0.75, ...
            'output_state', 0 );
        
        % Create a struct for storing input and output data
        data = struct( ...
            'time_array', [ ], ...
            'temp_array', [ ], ...
            'output_array', [ ] );
        
        plotter = struct( ...
            'timer', timer( ), ...
            'figure', [ ], ...
            'lw', 1.25, ...
            'ms', 4, ...
            'fs', 14 );
    end
    
    methods
        function obj = leaf_heater_system( sourcemeter_addr_input, temp_sensor_index_input )
            % Connect to both required instruments
            sourcemeter_open_gpib( obj, sourcemeter_addr_input );
            temp_sensor_open_serial( obj, temp_sensor_index_input );
            
            % Initialize control loop timer (but don't start yet)
            obj.controller.timer.BusyMode = 'error';   % Throw error if callback takes too long
            obj.controller.timer.ExecutionMode = 'fixedRate';
            obj.controller.timer.Period = 0.1;
            obj.controller.timer.TimerFcn = { @obj.controller_callback };
            set( obj.controller.timer, 'UserData', tic );
            
            % Initialize plotter timer (but don't start yet)
            obj.plotter.timer.BusyMode = 'error';   % Throw error if callback takes too long
            obj.plotter.timer.ExecutionMode = 'fixedRate';
            obj.plotter.timer.Period = 0.1;
            obj.plotter.timer.TimerFcn = { @obj.plotter_callback };
        end
        
        function delete( obj )
            fprintf( obj.sourcemeter_obj, ':OUTP OFF' );
            fclose( obj.sourcemeter_obj );
            fclose( obj.temp_sensor_obj );
            
            delete( obj.controller.timer );
            delete( obj.plotter.timer );
        end
        
        temp_sensor_open_serial( obj, temp_index )
        sourcemeter_open_gpib( obj, sourcemeter_addr )
        
        function control_loop_start( obj )
            fprintf( obj.sourcemeter_obj, ':OUTP ON' );
            start( obj.controller.timer );
        end
        function control_loop_stop( obj )
            fprintf( obj.sourcemeter_obj, ':OUTP OFF' );
            stop( obj.controller.timer );
        end
        function set_temp_setpoint( obj, setpoint_input )
            obj.controller.temp_setpoint = setpoint_input;
        end
        
        function enable_plotting( obj )
            obj.plotter.figure = figure( );
            set( gca, 'fontsize', obj.plotter.fs );
            xlabel( 'Time [s]' );
            ylabel( 'Temperature [C]' );
            start( obj.plotter.timer );
        end
        function disable_plotting( obj )
            stop( obj.plotter.timer );
        end
        
        function current_temp = temp_sensor_get_temp( obj )
            fprintf( obj.temp_sensor_obj, 'TEMP?' );
            current_temp = str2double( fgetl( obj.temp_sensor_obj ) );
        end
        
        function data = get_data( obj )
            data = obj.data;
        end
        
        sourcemeter_set_current( obj, current_setpoint )
        sourcemeter_set_voltage( obj, voltage_setpoint )
        current_measurement = sourcemeter_get_current( obj )
        voltage_measurement = sourcemeter_get_voltage( obj )
        
        % ( ~, ~ ) tosses the timer-related input arguments
        function controller_callback( obj, ~, ~ )
            obj.controller.busy_flag = true;
            current_temp = obj.temp_sensor_get_temp( );
            
            if( abs( current_temp - obj.controller.temp_setpoint ) < 5 )
                current_level = obj.controller.default_current_level / 1.5;
            else
                current_level = obj.controller.default_current_level;
            end
            
            if( obj.controller.output_state == 0 ) % CCS is off, temp is decreasing
                if( current_temp < obj.controller.temp_setpoint + obj.controller.hyst_down )
                    fprintf( obj.sourcemeter_obj, [ ':SOUR1:CURR ' num2str( current_level ) ] );
                    obj.controller.output_state = 1;
                end
            else                               % CCS is on, temp is increasing
                if( current_temp > obj.controller.temp_setpoint + obj.controller.hyst_up )
                    fprintf( obj.sourcemeter_obj, [ ':SOUR1:CURR ' num2str( current_level / 100 ) ] );
                    obj.controller.output_state = 0;
                end
            end
            
            obj.data.time_array( end + 1 ) = toc( get( obj.controller.timer, 'UserData' ) );
            obj.data.temp_array( end + 1 ) = current_temp;
            obj.data.output_array( end + 1 ) = current_level;
            obj.controller.busy_flag = false;
        end
        
        % ( ~, ~ ) tosses the timer-related input arguments
        function plotter_callback( obj, ~, ~ )
            if ~obj.controller.busy_flag
                plot( obj.data.time_array, data_sample.temp_array, ...
                    'o--', 'linewidth', obj.plotter.lw, 'markersize', obj.plotter.ms );
                grid on;
            end
        end
    end
end

